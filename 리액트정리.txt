#리덕스
npm i redux

#리액트리덕스 
npm i react-redux

#리덕스 툴킷
npm i @reduxjs/toolkit

#리액트 라우터
npm i react-router-dom

#라우터 설명

페이지 이동하는데 사용

useNavigate -> 클릭이동이 아니라 내가 클라이언트에서 직접 이동시켜줄때 
Ex) const navigate = useNavigate()
    navigate('/home')

useParams -> url의 파라미터를 가지고옴
Ex) const {params} = useParams()
    const getList = (params) =>{
	navigate(`/home/${params}`)
    }

useSearchParams -> 쿼리스트링 값을 가지고옴
Ex) const [query,setQuery] = useSearchParams()
    Localhost:3000/Edit?id=10&mode=dark
    const id = query.get('id') // 결과값 : 10
    const mode = query.get('mode') // 결과값 : dark
    <button onClick={()=>setQuery({mode:"light"})}><button> //클릭시 결과값 : Localhost:3000/Edit?id=10&mode=light


#리덕스 설명

state값을 전역적으로 저장함 
-> react에서는 상위 요소에서 하위요소로 내려줄때 props 라는걸 사용해서 내려 주어야함 
-> 그게 너무 불편하고(prop drilling) 컴포넌트에서 컴포넌트간 이동이 불가능함
-> 상위요소 로직이 너무 복잡해지거나 재사용성이 떨어짐
-> state나 로직을 전역적으로 선언해서 원하는 파일에서 원할때 직접 꺼내다 쓸 수 있게 만듬
-> 그게 redux!

1. 리덕스는 크게 reducer와 action으로 나눠짐
2. reducer는 state값을 전역적으로 저장하는 공간
3. action은 reducer에 있는값들 중에 누구를 어떻게 변화 시킬건지 적어둔 공간->순수 함수여야 함
4. dispatch로 action을 실행시킨후 reducer로 넘어가 state값을 저장하거나 변경시킴

useDispatch => 액션을 실행시킴 (dispatch -> 액션함수실행 -> state저장&변경)
Ex) let dispatch = useDispatch()  ==> 리액트 리덕스와 리덕스 툴킷의 사용방법이 다름
     - dispatch(countAction.countUp()) ->리덕스
     - dispatch(apiCall()) -> 리덕스 툴킷

useSelector => 등록해둔 데이터,함수,값을 가져와서 사용할 수 있음
Ex) const count = useSelector(state=>state.counter.value)

#리덕스 툴킷 -> 차이점만 설명

redux를 사용하다가 보니 보일러플레이트가 커지는걸 발견해서 필요없는 부분들을 덜어내고 합쳐서 사용함
-> 아직까지 리덕스 자체를 사용할 수 는 있으나 리덕스 자체에서 권장하지 않음
-> 리덕스 툴킷을 밀어주는 느낌이 있으나 리덕스 자체로 구현된 코드들이 더 많고 당연히 툴킷도 기반은 리덕스라 리덕스를 알아야함 그래도 편하긴함
-> redux toolkit!


*보일러플레이트 -> 같거나 약간의 수정만 있고 계속 반복되는 코드

====> 결국에 리덕스는 선택사항. 꼭 필요한곳 에서만 사용 하는걸 추천
          리액트 자체가 자유도가 심해 누가 정답이고 이게 정석이고 이런것들이 존재하지 않기 때문에 (디자인패턴이 굉장히 다양함 ->Provider 패턴 Prototype패턴 Proxy패턴 등등)
          만약 회사에서 쓰는 방식이 있고 다른 라이브러리가 있다면 그걸 따르는게 맞음
          -> 리덕스 관련 대체 라이브러리 => mobx, recoil, react-query, zustand, contextApi 등등

